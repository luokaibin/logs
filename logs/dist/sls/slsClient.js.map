{"version":3,"file":"slsClient.js","sources":["../../sls/slsClient.js"],"sourcesContent":["import crypto from 'crypto';\nimport { gunzipSync } from 'fflate'\n\n/**\n * 创建阿里云日志服务客户端\n * @param {string} endpoint - 服务入口，例如 \"ap-southeast-1.log.aliyuncs.com\"\n * @param {string} accessKeyId - 阿里云访问密钥ID\n * @param {string} accessKeySecret - 阿里云访问密钥密码\n * @param {string} projectName - 项目名称\n * @param {string} logstoreName - 日志库名称\n * @returns {Function} - 返回一个用于发送日志的函数\n */\nexport const createLogClient = (endpoint, accessKeyId, accessKeySecret, projectName, logstoreName) => {\n  const credentials = {\n    accessKeyId,\n    accessKeySecret,\n  };\n\n  /**\n   * 获取规范化的头信息\n   * @param {Object} headers - 请求头\n   * @returns {string} - 规范化的头信息字符串\n   */\n  function getCanonicalizedHeaders(headers) {\n    const keys = Object.keys(headers);\n    const prefixKeys = [];\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      if (key.startsWith('x-log-') || key.startsWith('x-acs-')) {\n        prefixKeys.push(key);\n      }\n    }\n\n    prefixKeys.sort();\n\n    var result = '';\n    for (let i = 0; i < prefixKeys.length; i++) {\n      const key = prefixKeys[i];\n      result += `${key}:${String(headers[key]).trim()}\\n`;\n    }\n\n    return result;\n  }\n\n  /**\n   * 格式化值\n   * @param {*} value - 需要格式化的值\n   * @returns {string} - 格式化后的字符串\n   */\n  function format(value) {\n    if (typeof value === 'undefined') {\n      return '';\n    }\n    return String(value);\n  }\n\n  /**\n   * 获取规范化的资源路径\n   * @param {string} path - 请求路径\n   * @param {Object} queries - 查询参数\n   * @returns {string} - 规范化的资源路径\n   */\n  function getCanonicalizedResource(path, queries) {\n    var resource = `${path}`;\n    const keys = Object.keys(queries);\n    const pairs = new Array(keys.length);\n    for (var i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      pairs[i] = `${key}=${format(queries[key])}`;\n    }\n\n    pairs.sort();\n    const querystring = pairs.join('&');\n    if (querystring) {\n      resource += `?${querystring}`;\n    }\n\n    return resource;\n  }\n\n  /**\n   * 生成签名\n   * @param {string} verb - 请求方法\n   * @param {string} path - 请求路径\n   * @param {Object} queries - 查询参数\n   * @param {Object} headers - 请求头\n   * @param {Object} credentials - 认证信息\n   * @returns {string} - 签名字符串\n   */\n  const sign = (verb, path, queries, headers, credentials) => {\n    const contentMD5 = headers['content-md5'] || '';\n    const contentType = headers['content-type'] || '';\n    const date = headers['date'];\n    const canonicalizedHeaders = getCanonicalizedHeaders(headers);\n    const canonicalizedResource = getCanonicalizedResource(path, queries);\n    const signString = `${verb}\\n${contentMD5}\\n${contentType}\\n` +\n      `${date}\\n${canonicalizedHeaders}${canonicalizedResource}`;\n    const signature = crypto.createHmac('sha1', credentials.accessKeySecret).update(signString).digest('base64');\n\n    return `LOG ${credentials.accessKeyId}:${signature}`;\n  }\n\n  /**\n   * 发送序列化后的日志数据\n   * @param {Uint8Array} payload - 已经序列化的日志数据\n   * @returns {Promise<Object>} - 响应结果\n   */\n  return async function sendLogs(payload) {\n    // const body = gunzipSync(payload);\n    const body = payload;\n    // 构建完整的请求头\n    const headers = {\n      'content-type': 'application/x-protobuf',\n      'date': new Date().toUTCString(),\n      'x-log-apiversion': '0.6.0',\n      'x-log-signaturemethod': 'hmac-sha1',\n      'x-log-bodyrawsize': body.length.toString(),\n      'content-length': body.length.toString(),\n      'content-md5': crypto.createHash('md5').update(body).digest('hex').toUpperCase(),\n    };\n    \n    // 构建请求路径\n    const path = `/logstores/${logstoreName}/shards/lb`;\n    \n    // 生成签名并添加到请求头\n    const signature = sign('POST', path, {}, headers, credentials);\n    headers['authorization'] = signature;\n    \n    // 构建完整的请求 URL\n    const url = `http://${projectName}.${endpoint}${path}`;\n    \n    // 发送请求\n    const response = await fetch(url, {\n      method: 'POST',\n      headers,\n      body: body\n    });\n    return response;\n  };\n};"],"names":["createLogClient","endpoint","accessKeyId","accessKeySecret","projectName","logstoreName","credentials","sign","verb","path","queries","headers","contentMD5","contentType","date","canonicalizedHeaders","keys","Object","prefixKeys","i","length","key","startsWith","push","sort","result","String","trim","getCanonicalizedHeaders","canonicalizedResource","resource","pairs","Array","value","querystring","join","getCanonicalizedResource","signString","signature","crypto","createHmac","update","digest","async","payload","body","Date","toUTCString","toString","createHash","toUpperCase","url","fetch","method"],"mappings":"2BAYY,MAACA,gBAAkB,CAACC,SAAUC,YAAaC,gBAAiBC,YAAaC,gBACnF,MAAMC,YAAc,CAClBJ,wBACAC,iCA0EF,MAAMI,KAAO,CAACC,KAAMC,KAAMC,QAASC,QAASL,eAC1C,MAAMM,WAAaD,QAAQ,gBAAkB,GACvCE,YAAcF,QAAQ,iBAAmB,GACzCG,KAAOH,QAAc,KACrBI,qBAtER,SAAiCJ,SAC/B,MAAMK,KAAOC,OAAOD,KAAKL,SACnBO,WAAa,GACnB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,KAAKI,OAAQD,IAAK,CACpC,MAAME,IAAML,KAAKG,IACbE,IAAIC,WAAW,WAAaD,IAAIC,WAAW,YAC7CJ,WAAWK,KAAKF,IAEnB,CAEDH,WAAWM,OAEX,IAAIC,OAAS,GACb,IAAK,IAAIN,EAAI,EAAGA,EAAID,WAAWE,OAAQD,IAAK,CAC1C,MAAME,IAAMH,WAAWC,GACvBM,QAAU,GAAGJ,OAAOK,OAAOf,QAAQU,MAAMM,UAC1C,CAED,OAAOF,MACR,CAmD8BG,CAAwBjB,SAC/CkB,sBAhCR,SAAkCpB,KAAMC,SACtC,IAAIoB,SAAW,GAAGrB,OAClB,MAAMO,KAAOC,OAAOD,KAAKN,SACnBqB,MAAQ,IAAIC,MAAMhB,KAAKI,QAC7B,IAAK,IAAID,EAAI,EAAGA,EAAIH,KAAKI,OAAQD,IAAK,CACpC,MAAME,IAAML,KAAKG,GACjBY,MAAMZ,GAAK,GAAGE,OAnBFY,MAmBgBvB,QAAQW,UAlBjB,IAAVY,MACF,GAEFP,OAAOO,QAgBb,CApBH,IAAgBA,MAsBdF,MAAMP,OACN,MAAMU,YAAcH,MAAMI,KAAK,KAK/B,OAJID,cACFJ,UAAY,IAAII,eAGXJ,QACR,CAgB+BM,CAAyB3B,KAAMC,SACvD2B,WAAa,GAAG7B,SAASI,eAAeC,gBACzCC,SAASC,uBAAuBc,wBAC/BS,UAAYC,OAAOC,WAAW,OAAQlC,YAAYH,iBAAiBsC,OAAOJ,YAAYK,OAAO,UAEnG,MAAO,OAAOpC,YAAYJ,eAAeoC,WAAW,EAQtD,OAAOK,eAAwBC,SAE7B,MAAMC,KAAOD,QAEPjC,QAAU,CACd,eAAgB,yBAChBG,MAAQ,IAAIgC,MAAOC,cACnB,mBAAoB,QACpB,wBAAyB,YACzB,oBAAqBF,KAAKzB,OAAO4B,WACjC,iBAAkBH,KAAKzB,OAAO4B,WAC9B,cAAeT,OAAOU,WAAW,OAAOR,OAAOI,MAAMH,OAAO,OAAOQ,eAI/DzC,KAAO,cAAcJ,yBAGrBiC,UAAY/B,KAAK,OAAQE,KAAM,GAAIE,QAASL,aAClDK,QAAuB,cAAI2B,UAG3B,MAAMa,IAAM,UAAU/C,eAAeH,WAAWQ,OAQhD,aALuB2C,MAAMD,IAAK,CAChCE,OAAQ,OACR1C,gBACAkC,KAAMA,MAGZ,CAAG"}