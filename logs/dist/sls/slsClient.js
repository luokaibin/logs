import crypto from"crypto";const createLogClient=(endpoint,accessKeyId,accessKeySecret,projectName,logstoreName)=>{const credentials={accessKeyId:accessKeyId,accessKeySecret:accessKeySecret};const sign=(verb,path,queries,headers,credentials)=>{const contentMD5=headers["content-md5"]||"",contentType=headers["content-type"]||"",date=headers.date,canonicalizedHeaders=function(headers){const keys=Object.keys(headers),prefixKeys=[];for(let i=0;i<keys.length;i++){const key=keys[i];(key.startsWith("x-log-")||key.startsWith("x-acs-"))&&prefixKeys.push(key)}prefixKeys.sort();var result="";for(let i=0;i<prefixKeys.length;i++){const key=prefixKeys[i];result+=`${key}:${String(headers[key]).trim()}\n`}return result}(headers),canonicalizedResource=function(path,queries){var resource=`${path}`;const keys=Object.keys(queries),pairs=new Array(keys.length);for(var i=0;i<keys.length;i++){const key=keys[i];pairs[i]=`${key}=${value=queries[key],void 0===value?"":String(value)}`}var value;pairs.sort();const querystring=pairs.join("&");return querystring&&(resource+=`?${querystring}`),resource}(path,queries),signString=`${verb}\n${contentMD5}\n${contentType}\n${date}\n${canonicalizedHeaders}${canonicalizedResource}`,signature=crypto.createHmac("sha1",credentials.accessKeySecret).update(signString).digest("base64");return`LOG ${credentials.accessKeyId}:${signature}`};return async function(payload){const body=payload,headers={"content-type":"application/x-protobuf",date:(new Date).toUTCString(),"x-log-apiversion":"0.6.0","x-log-signaturemethod":"hmac-sha1","x-log-bodyrawsize":body.length.toString(),"content-length":body.length.toString(),"content-md5":crypto.createHash("md5").update(body).digest("hex").toUpperCase()},path=`/logstores/${logstoreName}/shards/lb`,signature=sign("POST",path,{},headers,credentials);headers.authorization=signature;const url=`http://${projectName}.${endpoint}${path}`;return await fetch(url,{method:"POST",headers:headers,body:body})}};export{createLogClient};
//# sourceMappingURL=slsClient.js.map
